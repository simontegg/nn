{
  "name": "dnn",
  "version": "0.1.0",
  "description": "Deep learning library for Node.js. (includes MLP, RBM, DBN, CRBM, CDBN)",
  "main": "./lib/dnn",
  "repository": {
    "type": "git",
    "url": "git://github.com/junku901/dnn"
  },
  "keywords": [
    "deep learning",
    "dnn",
    "deep neural network",
    "neural network",
    "machine learning",
    "deep belief network",
    "mlp",
    "boltzmann machine",
    "restricted boltzmann machine",
    "multi layer perceptron",
    "logistic regression",
    "ml"
  ],
  "author": {
    "name": "Joon-Ku Kang",
    "email": "junku901@gmail.com"
  },
  "license": "MIT",
  "dependencies": {},
  "engines": {
    "node": "*"
  },
  "readme": "# dnn\r\n\r\nDeep learning library for node.js.\r\n\r\nIncludes Logistic-Regression, MLP, RBM, DBN, CRBM, CDBN. (Deep Neural Network)\r\n\r\nRBM is using contrastive-divergence for its training algorithm.\r\n\r\n## Installation\r\n```\r\n$ npm install dnn\r\n```\r\n\r\n## Features\r\n\r\n  * Logistic Regression\r\n  * MLP (Multi-Layer Perceptron)\r\n  * RBM (Restricted Boltzmann Machine)\r\n  * DBN (Deep Belief Network)\r\n  * CRBM (Restricted Boltzmann Machine with continuous-valued inputs)\r\n  * CDBN (Deep Belief Network with continuous-valued inputs)\r\n\r\n## Logistic Regression\r\n```\r\nvar dnn = require('dnn');\r\nvar x = [[1,1,1,0,0,0],\r\n         [1,0,1,0,0,0],\r\n         [1,1,1,0,0,0],\r\n         [0,0,1,1,1,0],\r\n         [0,0,1,1,0,0],\r\n         [0,0,1,1,1,0]];\r\nvar y = [[1, 0],\r\n         [1, 0],\r\n         [1, 0],\r\n         [0, 1],\r\n         [0, 1],\r\n         [0, 1]];\r\n\r\nvar lrClassifier = new dnn.LogisticRegression({\r\n    'input' : x,\r\n    'label' : y,\r\n    'n_in' : 6,\r\n    'n_out' : 2\r\n});\r\n\r\nlrClassifier.set('log level',1); // 0 : nothing, 1 : info, 2 : warning.\r\n\r\nvar training_epochs = 800, lr = 0.01;\r\n\r\nlrClassifier.train({\r\n    'lr' : lr,\r\n    'epochs' : training_epochs\r\n});\r\n\r\nx = [[1, 1, 0, 0, 0, 0],\r\n     [0, 0, 0, 1, 1, 0],\r\n     [1, 1, 1, 1, 1, 0]];\r\n\r\nconsole.log(\"Result : \",lrClassifier.predict(x));\r\n```\r\n\r\n## MLP (Multi-Layer Perceptron)\r\n```\r\nvar dnn = require('dnn');\r\nvar x = [[0.4, 0.5, 0.5, 0.,  0.,  0.],\r\n         [0.5, 0.3,  0.5, 0.,  0.,  0.],\r\n         [0.4, 0.5, 0.5, 0.,  0.,  0.],\r\n         [0.,  0.,  0.5, 0.3, 0.5, 0.],\r\n         [0.,  0.,  0.5, 0.4, 0.5, 0.],\r\n         [0.,  0.,  0.5, 0.5, 0.5, 0.]];\r\nvar y =  [[1, 0],\r\n          [1, 0],\r\n          [1, 0],\r\n          [0, 1],\r\n          [0, 1],\r\n          [0, 1]];\r\n\r\nvar mlp = new dnn.MLP({\r\n    'input' : x,\r\n    'label' : y,\r\n    'n_ins' : 6,\r\n    'n_outs' : 2,\r\n    'hidden_layer_sizes' : [4,4,5]\r\n});\r\n\r\nmlp.set('log level',1); // 0 : nothing, 1 : info, 2 : warning.\r\n\r\nmlp.train({\r\n    'lr' : 0.6,\r\n    'epochs' : 20000\r\n});\r\n\r\na = [[0.5, 0.5, 0., 0., 0., 0.],\r\n     [0., 0., 0., 0.5, 0.5, 0.],\r\n     [0.5, 0.5, 0.5, 0.5, 0.5, 0.]];\r\n\r\nconsole.log(mlp.predict(a));\r\n```\r\n\r\n## RBM (Restricted Boltzmann Machine)\r\n```\r\nvar dnn = require('dnn');\r\nvar data = [[1,1,1,0,0,0],\r\n            [1,0,1,0,0,0],\r\n            [1,1,1,0,0,0],\r\n            [0,0,1,1,1,0],\r\n            [0,0,1,1,0,0],\r\n            [0,0,1,1,1,0]];\r\n\r\nvar rbm = new dnn.RBM({\r\n    input : data,\r\n    n_visible : 6,\r\n    n_hidden : 2\r\n});\r\n\r\nrbm.set('log level',1); // 0 : nothing, 1 : info, 2 : warning.\r\n\r\nvar trainingEpochs = 500;\r\n\r\nrbm.train({\r\n    lr : 0.6,\r\n    k : 1, // CD-k.\r\n    epochs : trainingEpochs\r\n});\r\n\r\nvar v = [[1, 1, 0, 0, 0, 0],\r\n         [0, 0, 0, 1, 1, 0]];\r\n\r\nconsole.log(rbm.reconstruct(v));\r\nconsole.log(rbm.sampleHgivenV(v)[0]); // get hidden layer probabilities from visible unit.\r\n```\r\n\r\n## DBN (Deep Belief Network)\r\n```\r\nvar dnn = require('dnn');\r\nvar x = [[1,1,1,0,0,0],\r\n         [1,0,1,0,0,0],\r\n         [1,1,1,0,0,0],\r\n         [0,0,1,1,1,0],\r\n         [0,0,1,1,0,0],\r\n         [0,0,1,1,1,0]];\r\nvar y = [[1, 0],\r\n         [1, 0],\r\n         [1, 0],\r\n         [0, 1],\r\n         [0, 1],\r\n         [0, 1]];\r\n\r\nvar pretrain_lr = 0.6, pretrain_epochs = 900, k = 1, finetune_lr = 0.6, finetune_epochs = 500;\r\n\r\nvar dbn = new dnn.DBN({\r\n    'input' : x,\r\n    'label' : y,\r\n    'n_ins' : 6,\r\n    'n_outs' : 2,\r\n    'hidden_layer_sizes' : [10,12,11,8,6,4]\r\n});\r\n\r\ndbn.set('log level',1); // 0 : nothing, 1 : info, 2 : warning.\r\n\r\n// Pre-Training using using RBM\r\ndbn.pretrain({\r\n    'lr' : pretrain_lr,\r\n    'k' : k, // RBM CD-k.\r\n    'epochs' : pretrain_epochs\r\n});\r\n\r\n// Fine-Tuning dbn using mlp backpropagation.\r\ndbn.finetune({\r\n    'lr' : finetune_lr,\r\n    'epochs' : finetune_epochs\r\n});\r\n\r\n/*\r\nfor(var i =0;i<6;i++) {\r\n    console.log(i+1,\"th layer W : \",dbn.sigmoidLayers[i].W);\r\n}\r\n*/\r\n\r\nx = [[1, 1, 0, 0, 0, 0],\r\n     [0, 0, 0, 1, 1, 0],\r\n     [1, 1, 1, 1, 1, 0]];\r\n\r\nconsole.log(dbn.predict(x));\r\n```\r\n\r\n## CRBM (Restricted Boltzmann Machine with continuous-valued inputs)\r\n```\r\nvar dnn = require('dnn');\r\nvar data = [[0.4, 0.5, 0.5, 0.,  0.,  0.7],\r\n            [0.5, 0.3,  0.5, 0.,  1,  0.6],\r\n            [0.4, 0.5, 0.5, 0.,  1,  0.9],\r\n            [0.,  0.,  0., 0.3, 0.5, 0.],\r\n            [0.,  0.,  0., 0.4, 0.5, 0.],\r\n            [0.,  0.,  0., 0.5, 0.5, 0.]];\r\n\r\nvar crbm = new dnn.CRBM({\r\n    input : data,\r\n    n_visible : 6,\r\n    n_hidden : 5\r\n});\r\n\r\ncrbm.set('log level',1); // 0 : nothing, 1 : info, 2 : warning.\r\n\r\ncrbm.train({\r\n    lr : 0.6,\r\n    k : 1, // CD-k.\r\n    epochs : 1500\r\n});\r\n\r\nvar v = [[0.5, 0.5, 0., 0., 0., 0.],\r\n         [0., 0., 0., 0.5, 0.5, 0.]];\r\n\r\nconsole.log(crbm.reconstruct(v));\r\nconsole.log(crbm.sampleHgivenV(v)[0]); // get hidden layer probabilities from visible unit.\r\n```\r\n\r\n## CDBN (Deep Belief Network with continuous-valued inputs)\r\n```\r\nvar dnn = require('dnn')\r\n\r\nvar x = [[0.4, 0.5, 0.5, 0.,  0.,  0.],\r\n         [0.5, 0.3,  0.5, 0.,  0.,  0.],\r\n         [0.4, 0.5, 0.5, 0.,  0.,  0.],\r\n         [0.,  0.,  0.5, 0.3, 0.5, 0.],\r\n         [0.,  0.,  0.5, 0.4, 0.5, 0.],\r\n         [0.,  0.,  0.5, 0.5, 0.5, 0.]];\r\n\r\nvar y = [[1, 0],\r\n         [1, 0],\r\n         [1, 0],\r\n         [0, 1],\r\n         [0, 1],\r\n         [0, 1]];\r\n\r\nvar cdbn = new dnn.CDBN({\r\n    'input' : x,\r\n    'label' : y,\r\n    'n_ins' : 6,\r\n    'n_outs' : 2,\r\n    'hidden_layer_sizes' : [10,12,11,8,6,4]\r\n});\r\n\r\ncdbn.set('log level',1); // 0 : nothing, 1 : info, 2 : warning.\r\n\r\nvar pretrain_lr = 0.8, pretrain_epochs = 1600, k= 1, finetune_lr = 0.84, finetune_epochs = 10000;\r\n\r\n// Pre-Training using using RBM, CRBM.\r\ncdbn.pretrain({\r\n    'lr' : pretrain_lr,\r\n    'k' : k, // RBM CD-k.\r\n    'epochs' : pretrain_epochs\r\n});\r\n\r\n// Fine-Tuning dbn using mlp backpropagation.\r\ncdbn.finetune({\r\n    'lr' : finetune_lr,\r\n    'epochs' : finetune_epochs\r\n});\r\n\r\n/*\r\nfor(var i =0;i<6;i++) {\r\n    console.log(i+1,\"th layer W : \",cdbn.sigmoidLayers[i].W);\r\n}\r\n*/\r\n\r\na = [[0.5, 0.5, 0., 0., 0., 0.],\r\n     [0., 0., 0., 0.5, 0.5, 0.],\r\n     [0.1,0.2,0.4,0.4,0.3,0.6]];\r\n\r\nconsole.log(cdbn.predict(a));\r\n```\r\n\r\n##License\r\n\r\n(The MIT License)\r\n\r\nCopyright (c) 2014 Joon-Ku Kang &lt;junku901@gmail.com&gt;\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the 'Software'), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/junku901/dnn/issues"
  },
  "homepage": "https://github.com/junku901/dnn",
  "_id": "dnn@0.1.0",
  "_shasum": "e3c28ada4460a4e361901db58f959bea742ef736",
  "_from": "dnn@",
  "_resolved": "https://registry.npmjs.org/dnn/-/dnn-0.1.0.tgz"
}
