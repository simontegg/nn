{
  "name": "regression",
  "description": "Javascript least squares data fitting methods",
  "author": {
    "name": "Tom Alexander",
    "email": "me@tomalexander.co.nz"
  },
  "version": "1.2.0",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "git://github.com/Tom-Alexander/regression-js"
  },
  "keywords": [
    "regression",
    "data",
    "fitting",
    "modelling",
    "analysis"
  ],
  "devDependencies": {
    "grunt": "~0.4.1",
    "grunt-contrib-uglify": "~0.2.2"
  },
  "readme": "regression.js is a javascript library containing a collection of least squares fitting methods for finding a trend in a set of data. It currently contains methods for linear, exponential, logarithmic, power and polynomial trends.\n\nUsage\n=====\nMost regressions require only two parameters - the regression method (linear, exponential, logarithmic, power or polynomial) and a data source. A third parameter can be used to define the degree of a polynomial when a polynomial regression is required.\n            \nregression.js will return an object containing an equation array and a points array.\n\nLinear regression \n-----------------\n\nequation: ```[gradient, y-intercept]``` in the form y = mx + c \n``` \nvar data = [[0,1],[32, 67] .... [12, 79]];\nvar result = regression('linear', data);\n``` \n            \nExponential regression \n----------------------\n\nequation: ```[a, b]``` in the form y = ae^bx \n            \nLogarithmic regression \n----------------------\n\nequation: ```[a, b]``` in the form y = a + b ln x \n            \nPower law regression \n--------------------\n\nequation: ```[a, b]``` in the form y = ax^b \n            \nPolynomial regression \n---------------------\n\nequation: ```[a0, .... , an]``` in the form a0x^0 ... + anx^n\n```\nvar data = [[0,1],[32, 67] .... [12, 79]];\nvar result = regression('polynomial', data, 4);\n```\n\nLastvalue\n---------\n\nNot exactly a regression. Uses the last value to fill the blanks when forecasting.\n\n\n\nFilling the blanks and forecasting\n==================================\n\n```\nvar data = [[0,1], [32, null] .... [12, 79]];\n```\n\nIf you use a ```null``` value for data, regressionjs will fill it using the trend.\n",
  "readmeFilename": "readme.md",
  "bugs": {
    "url": "https://github.com/Tom-Alexander/regression-js/issues"
  },
  "homepage": "https://github.com/Tom-Alexander/regression-js",
  "_id": "regression@1.2.0",
  "_shasum": "3e6a1b8f6a34990cff9f3369a55327ddb0755f43",
  "_from": "regression@",
  "_resolved": "https://registry.npmjs.org/regression/-/regression-1.2.0.tgz"
}
