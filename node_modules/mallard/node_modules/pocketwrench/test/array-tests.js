var pocketknife = require('../index');
var sinon = require('sinon');
var expect = require('chai').expect;

describe('Array Unit Tests', function () {
  'use strict';

  var testCollection;

  beforeEach(function() {
    testCollection = [
      {name: 'Fred', age: 25},
      {name: 'Bob', age: 40},
      {name: 'Sally', age: 42},
      {name: 'Alice', age: 34},
      {name: 'Jane', age: 25}
    ];
  });

  describe('Search Collection Tests', function() {
    it('Should find an element by a field name', function() {
      var foundElement = pocketknife.array.findFirstByField(testCollection, 'name', 'Sally');
      expect(foundElement.name).to.equal('Sally');
    });
    it('Should return null when an element is not found while searching by a field name', function() {
      var foundElement = pocketknife.array.findFirstByField(testCollection, 'name', 'James');
      expect(foundElement).to.be.null; // jshint ignore:line
    });
    it('Should find all elements by a field name', function() {
      var foundElements = pocketknife.array.findByField(testCollection, 'age', 25);
      expect(foundElements.length).to.equal(2);
    });
    it('Should return an empty array when no matching elements found', function() {
      var foundElements = pocketknife.array.findByField(testCollection, 'name', 'James');
      expect(foundElements.length).to.equal(0);
    });
    it('Should find an element index by a field name', function() {
      var foundElementIndex = pocketknife.array.findFirstIndexByField(testCollection, 'name', 'Sally');
      expect(foundElementIndex).to.equal(2);
    });
    it('Should return null when an element index is not found while searching by a field name', function() {
      var foundElementIndex = pocketknife.array.findFirstIndexByField(testCollection, 'name', 'James');
      expect(foundElementIndex).to.be.null; // jshint ignore:line
    });
  });

  describe('Sort Collection Tests', function() {
    it('Should sort the array into ascending order by field name', function() {
      var sortedArray = pocketknife.array.sortByField(testCollection, 'name');
      expect(sortedArray[0].name).to.equal('Alice');
      expect(sortedArray[1].name).to.equal('Bob');
      expect(sortedArray[2].name).to.equal('Fred');
      expect(sortedArray[3].name).to.equal('Jane');
      expect(sortedArray[4].name).to.equal('Sally');
    });
    it('Should sort the array into descending order by field name', function() {
      var sortedArray = pocketknife.array.sortByField(testCollection, 'name', true);
      expect(sortedArray[0].name).to.equal('Sally');
      expect(sortedArray[1].name).to.equal('Jane');
      expect(sortedArray[2].name).to.equal('Fred');
      expect(sortedArray[3].name).to.equal('Bob');
      expect(sortedArray[4].name).to.equal('Alice');
    });
    it('Should sort the array into ascending order by field name with duplicate values', function() {
      var sortedArray = pocketknife.array.sortByField(testCollection, 'age');
      expect(sortedArray[0].age).to.equal(25);
      expect(sortedArray[1].age).to.equal(25);
      expect(sortedArray[2].age).to.equal(34);
      expect(sortedArray[3].age).to.equal(40);
      expect(sortedArray[4].age).to.equal(42);
    });
    it('Should sort the array into descending order by field name with duplicate values', function() {
      var sortedArray = pocketknife.array.sortByField(testCollection, 'age', true);
      expect(sortedArray[0].age).to.equal(42);
      expect(sortedArray[1].age).to.equal(40);
      expect(sortedArray[2].age).to.equal(34);
      expect(sortedArray[3].age).to.equal(25);
      expect(sortedArray[4].age).to.equal(25);
    });
    it('Should not change the original array', function() {
      var sortedArray = pocketknife.array.sortByField(testCollection, 'name');
      expect(testCollection[0].name).to.equal('Fred');
      expect(testCollection[1].name).to.equal('Bob');
      expect(testCollection[2].name).to.equal('Sally');
      expect(testCollection[3].name).to.equal('Alice');
      expect(testCollection[4].name).to.equal('Jane');
    });
  });

  describe('Value Frequency Tests', function() {
    it('Should find the most frequently occurring element', function() {
      var mostPopularAge = pocketknife.array.mostFrequentElement(testCollection, 'age');
      expect(mostPopularAge).to.equal(25);
    });
    it('Should pick the first element when frequency is the same', function() {
      var mostPopularName = pocketknife.array.mostFrequentElement(testCollection, 'name');
      expect(mostPopularName).to.equal('Fred');
    });
  });

});
